{"version":3,"sources":["components/Input/styles.ts","components/Input/index.tsx","components/Button/index.tsx","pages/styles.ts","pages/index.tsx","serviceWorker.ts","styles/global.ts","index.tsx"],"names":["Container","styled","div","Input","input","CustomInput","Icon","icon","rest","size","color","Button","button","formAnimation","keyframes","from","opacity","to","Home","useState","date","setDate","initialValues","useMemo","timestamp","onSubmit","values","parsedDate","fromUnixTime","format","handleSubmit","handleChange","handleBlur","FaClock","name","data-testid","placeholder","onChange","onBlur","value","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f467c720.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 15px;\n  background: #4a4a4a;\n  border: 2px solid #4a4a4a;\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-right: 10px;\n  }\n`;\n\nexport const Input = styled.input`\n  background: #4a4a4a;\n  color: #fff;\n  border: none;\n`;\n","import React, { InputHTMLAttributes } from 'react';\nimport { IconBaseProps } from 'react-icons';\n\nimport { Container, Input } from './styles';\n\ninterface CustomInputInterface extends InputHTMLAttributes<HTMLInputElement> {\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst CustomInput: React.FC<CustomInputInterface> = ({\n  icon: Icon,\n  ...rest\n}) => {\n  return (\n    <Container>\n      {Icon && <Icon size={20} color=\"#fff\" />}\n      <Input {...rest} />\n    </Container>\n  );\n};\n\nexport default CustomInput;\n","import React, { ButtonHTMLAttributes } from 'react';\nimport styled from 'styled-components';\n\nconst Button: React.FC<ButtonHTMLAttributes<HTMLButtonElement>> = styled.button`\n  align-self: stretch;\n  border-radius: 5px;\n  height: 50px;\n  color: #fff;\n  margin: 30px 0 0 0;\n  border: 2px solid #eb9932;\n  background-color: #eb9932;\n`;\n\nexport default Button;\n","import styled, { keyframes } from 'styled-components';\n\nconst formAnimation = keyframes({\n  from: {\n    opacity: 0,\n  },\n  to: {\n    opacity: 1,\n  },\n});\n\nexport const Container = styled.div`\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  header {\n    display: inherit;\n    flex-direction: row;\n    margin-bottom: 60px;\n    align-items: center;\n\n    div {\n      margin-left: 15px;\n\n      h1 {\n        font-weight: bold;\n      }\n    }\n  }\n\n  form {\n    display: flex;\n    flex-direction: column;\n    animation: ${formAnimation} 2s;\n    align-items: center;\n\n    hr {\n      border: 0.5px solid #ffffff50;\n      align-self: stretch;\n      margin: 20px 0;\n    }\n\n    span {\n      & + span {\n        font-weight: bold;\n        font-size: 18px;\n        text-decoration: underline;\n        margin-top: 10px;\n      }\n    }\n  }\n`;\n","import React, { useMemo, useState } from 'react';\nimport { Formik, Form, FormikProps } from 'formik';\nimport { fromUnixTime, format } from 'date-fns';\nimport { FaClock } from 'react-icons/fa';\nimport { FiRepeat } from 'react-icons/fi';\n\nimport Input from '../components/Input';\nimport Button from '../components/Button';\n\nimport { Container } from './styles';\n\ninterface FormValues {\n  timestamp: string;\n}\n\nconst Home: React.FC = () => {\n  const [date, setDate] = useState<string>();\n\n  const initialValues: FormValues = useMemo(\n    () => ({\n      timestamp: '1588977925',\n    }),\n    [],\n  );\n\n  const handleFormOnSubmit = (values: FormValues): void => {\n    const parsedDate = fromUnixTime(+values.timestamp);\n\n    setDate(format(parsedDate, 'MM/dd/yyyy hh:mm:ss a'));\n  };\n\n  return (\n    <Container>\n      <header>\n        <FiRepeat size={40} color=\"#fff\" />\n        <div>\n          <h1>Timestamper</h1>\n          <h3>Converts timestamp into date</h3>\n        </div>\n      </header>\n\n      <Formik initialValues={initialValues} onSubmit={handleFormOnSubmit}>\n        {({\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          values,\n        }: FormikProps<FormValues>) => (\n          <Form onSubmit={handleSubmit}>\n            <Input\n              icon={FaClock}\n              name=\"timestamp\"\n              data-testid=\"timestampInput\"\n              placeholder=\"Timestamp\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.timestamp}\n            />\n            <Button data-testid=\"submitButton\" type=\"submit\">\n              Convert\n            </Button>\n\n            {date && (\n              <>\n                <hr />\n                <span>Timestamp date:</span>\n                <span>{date}</span>\n              </>\n            )}\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  html, body, #root {\n    height: 100%;\n  }\n  \n  body {\n    background: #3C3845;\n    color: #FFF;\n    -webkit-font-smoothing: antialised;\n  }\n\n  body, input, button {\n    font: 16px Lato, serif;\n  }\n\n  #root {\n    margin: 0 auto;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 500;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages';\nimport * as serviceWorker from './serviceWorker';\n\nimport GlobalStyle from './styles/global';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}